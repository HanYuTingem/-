//
//  GCUtil.m
//  iMagazine2
//
//  Created by dreamRen on 12-11-16.
//  Copyright (c) 2012年 iHope. All rights reserved.
//

#import "GCUtil.h"
#include <CommonCrypto/CommonDigest.h>
#import <netdb.h>
#import <QuartzCore/QuartzCore.h>
#import "AFNetworking.h"


static GCUtil *_sharedInstance;

@implementation GCUtil


+(void)connectedToNetwork:(connectedToNetBlock)type{
    
    [[AFNetworkReachabilityManager sharedManager]startMonitoring ];
    [[AFNetworkReachabilityManager sharedManager]setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
        NSString *Network = @"";
        
        switch (status) {
            case AFNetworkReachabilityStatusNotReachable:
            {
                Network = NotReachable;
                break;
            }
            case AFNetworkReachabilityStatusReachableViaWiFi:
            {
                Network = WIFI;
                break;
            }
            case AFNetworkReachabilityStatusReachableViaWWAN:
            {
                Network = WWAN;
                break;
            }
            case AFNetworkReachabilityStatusUnknown:
            {
                NSLog(@"AFNetworkReachabilityStatusUnknown");
                break;
            }
            default:
                break;
        }
        
        type(Network);
    } ];
}
//是否连网
//+(BOOL)connectedToNetwork
//{
//    // Create zero addy
//    struct sockaddr_in zeroAddress;
//    bzero(&zeroAddress, sizeof(zeroAddress));
//    zeroAddress.sin_len = sizeof(zeroAddress);
//    zeroAddress.sin_family = AF_INET;
//    
//    // Recover reachability flags
//    SCNetworkReachabilityRef defaultRouteReachability = SCNetworkReachabilityCreateWithAddress(NULL, (struct sockaddr *)&zeroAddress);
//    SCNetworkReachabilityFlags flags;
//    
//    BOOL didRetrieveFlags = SCNetworkReachabilityGetFlags(defaultRouteReachability, &flags);
//    CFRelease(defaultRouteReachability);
//    
//    if (!didRetrieveFlags)
//    {
//        printf("Error. Could not recover network reachability flags\n");
//        return NO;
//    }
//    
//    BOOL isReachable = ((flags & kSCNetworkFlagsReachable) != 0);
//    BOOL needsConnection = ((flags & kSCNetworkFlagsConnectionRequired) != 0);
//    return (isReachable && !needsConnection) ? YES : NO;
//}

//显示提示框,只有一个确定按钮
+(void)showInfoAlert:(NSString*)aInfo{
    UIAlertView *tAlert=[[UIAlertView alloc] initWithTitle:@"提示" message:aInfo delegate:nil cancelButtonTitle:@"确定" otherButtonTitles:nil];
    [tAlert show];
    [tAlert release];
}


//显示请求错误
+(void)showDataErrorAlert{
    [GCUtil showInfoAlert:@"获取数据错误"];
}

//添加单击事件
+(UITapGestureRecognizer *)getTapGesture:(id)target action:(SEL)action{
    UITapGestureRecognizer *tapGestureRecognizer = [[[UITapGestureRecognizer alloc] initWithTarget:target action:action] autorelease];
    tapGestureRecognizer.delegate=target;
    tapGestureRecognizer.numberOfTapsRequired = 1;
    return tapGestureRecognizer;
}

+(UILongPressGestureRecognizer*)getLongPressClick:(id)target action:(SEL)action{
    UILongPressGestureRecognizer *longPressRecognizer=[[[UILongPressGestureRecognizer alloc] initWithTarget:target action:action] autorelease];
    longPressRecognizer.delegate=target;
    [longPressRecognizer setMinimumPressDuration:1.0];
    return longPressRecognizer;
}

+(BOOL)isEmptyOrWhitespace:(NSString*)aStr {
    // A nil or NULL string is not the same as an empty string
    return 0 == aStr.length || ![aStr stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]].length;
}

//from大小等比例缩小,如果原始大小比目标大小小,则保持原始大小
+(CGSize)reduceSizeFrom:(CGSize)fromSize To:(CGSize)toSize{
    
    CGFloat iWidth=toSize.width;
    CGFloat iHeight=toSize.height;
    
    CGFloat iImageWidth=fromSize.width;
    CGFloat iImageHeight=fromSize.height;
    
    if (iImageWidth>0 && iImageHeight>0 && (iImageWidth>iWidth || iImageHeight>iHeight)) {
        if (iImageWidth/iImageHeight >= iWidth/iHeight) {
            iImageHeight=iWidth*iImageHeight/iImageWidth;
            iImageWidth=iWidth;
        }else{
            iImageWidth=iHeight*iImageWidth/iImageHeight;
            iImageHeight=iHeight;
        }
    }
    
    return CGSizeMake(iImageWidth, iImageHeight);
}

//按比例更改图片大小
+(UIImage*)scaleAspectFitImage:(UIImage*)aImage ToSize:(CGSize)aSize
{
    CGFloat iImageWidth=aImage.size.width;
    CGFloat iImageHeight=aImage.size.height;
    
    if (iImageWidth>0 && iImageHeight>0){
        if(iImageWidth/iImageHeight>=aSize.width/aSize.height) {
            iImageHeight=aSize.width*iImageHeight/iImageWidth;
            iImageWidth=aSize.width;
        }else{
            iImageWidth=aSize.height*iImageWidth/iImageHeight;
            iImageHeight=aSize.height;
        }
    }
    
    // 创建一个bitmap的context
    // 并把它设置成为当前正在使用的context
    UIGraphicsBeginImageContext(CGSizeMake(iImageWidth, iImageHeight));
    // 绘制改变大小的图片
    [aImage drawInRect:CGRectMake(0, 0, iImageWidth, iImageHeight)];
    // 从当前context中创建一个改变大小后的图片
    UIImage* scaledImage = UIGraphicsGetImageFromCurrentImageContext();
    // 使当前的context出堆栈
    UIGraphicsEndImageContext();
    // 返回新的改变大小后的图片
    return scaledImage;
}

//按比例更改图片大小,短的那个边等于toSize对应的边的长度,长的那个变>=toSize对应的边的长度
+(UIImage*)scaleImage:(UIImage*)aImage ToSize:(CGSize)aSize
{
    CGFloat iImageWidth=aImage.size.width;
    CGFloat iImageHeight=aImage.size.height;
    
    if (iImageWidth>0 && iImageHeight>0){
        if(iImageWidth/iImageHeight>=aSize.width/aSize.height) {
            iImageWidth=iImageWidth*aSize.height/iImageHeight;
            iImageHeight=aSize.height;
        }else{
            iImageHeight=iImageHeight*aSize.width/iImageWidth;
            iImageWidth=aSize.width;
        }
    }
    
    // 创建一个bitmap的context
    // 并把它设置成为当前正在使用的context
    UIGraphicsBeginImageContext(CGSizeMake(iImageWidth, iImageHeight));
    // 绘制改变大小的图片
    [aImage drawInRect:CGRectMake(0, 0, iImageWidth, iImageHeight)];
    // 从当前context中创建一个改变大小后的图片
    UIImage* scaledImage = UIGraphicsGetImageFromCurrentImageContext();
    // 使当前的context出堆栈
    UIGraphicsEndImageContext();
    // 返回新的改变大小后的图片
    return scaledImage;
}

+(NSString *)getToday
{
    NSDateFormatter *dateFormatter=[[[NSDateFormatter alloc] init] autorelease];
    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
    return [dateFormatter stringFromDate:[NSDate date]];
}

+(NSString *)formatToDay:(NSDate*)aDate
{
    NSDateFormatter *dateFormatter=[[[NSDateFormatter alloc] init] autorelease];
    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
    return [dateFormatter stringFromDate:aDate];
}

//日期+随机数
+(NSString*)getTimeAndRandom{
    int iRandom=arc4random();
	if (iRandom<0) {
		iRandom=-iRandom;
	}
	
	NSDateFormatter *tFormat=[[[NSDateFormatter alloc] init] autorelease];
	[tFormat setDateFormat:@"yyyyMMddHHmmss"];
	NSString *tResult=[NSString stringWithFormat:@"%@%d",[tFormat stringFromDate:[NSDate date]],iRandom];
    return tResult;
}

//判断手机号码格式是否正确
+(BOOL)ThePhoneNumber:(NSString *)string
{
    //手机号以13， 15，18开头，八个 \d 数字字符
    NSString *phoneRegex = @"^((13[0-9])|(15[^4,\\D])|(18[0,0-9]))\\d{8}$";
    NSPredicate *phoneTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",phoneRegex];
    return [phoneTest evaluateWithObject:string];
}

//格式化日期, 时间
+(NSString*)formatToDayAndTime:(NSDate*)aDate{
    NSDateFormatter *dateFormatter=[[[NSDateFormatter alloc] init] autorelease];
    [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    return [dateFormatter stringFromDate:aDate];
}

+(NSString*)formatDayAndTimeFrom1970Seconds:(NSString*)aSecond{
    if ([GCUtil isEmptyOrWhitespace:aSecond]) {
        return @"";
    }
    NSDate *tDate=[NSDate dateWithTimeIntervalSince1970:[aSecond longLongValue]];
    //    return [GCUtil formatToDayAndTime:tDate];
    
    NSDateFormatter *dateFormatter=[[[NSDateFormatter alloc] init] autorelease];
    [dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm"];
    return [dateFormatter stringFromDate:tDate];
}

+(BOOL)isValidateEmail:(NSString *)email
{
    NSString *emailRegex = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegex];
    return [emailTest evaluateWithObject:email];
}
//正则判断中文英文，及数字
+(BOOL)isTextFiledNumber:(NSString*)textField
{
  NSString * str = @"^\\w{0,6}$";
    NSPredicate * predicate = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",str];
    if ([predicate evaluateWithObject:textField]== YES) {
        
        return YES;
    }
    else{
        return NO;
    }
}
+(BOOL)isTextFiledChinaAndEnglish:(NSString*)textField
{
    NSString *strRegex = @"^[\\w]{2,8}|[\u4e00-\u9fa5]{2,8}$";
    NSPredicate *strTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", strRegex];
    return [strTest evaluateWithObject:textField];

}
//正则判断意见反馈
+(BOOL)isTextFiledfeedback:(NSString*)textField
{
    NSString *strRegex = @"^[\\w]{0,300}|[\u4e00-\u9fa5]{0,300}$";
    NSPredicate *strTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", strRegex];
    return [strTest evaluateWithObject:textField];
    
}

// 正则判断手机号码地址格式
+(BOOL)isMobileNumber:(NSString *)mobileNum
{
    /**
     * 手机号码
     * 移动：134[0-8],135,136,137,138,139,150,151,157,158,159,182,187,188
     * 联通：130,131,132,152,155,156,185,186
     * 电信：133,1349,153,180,189
     */
    NSString * MOBILE = @"^1(3[0-9]|5[0-35-9]|8[025-9])\\d{8}$";
    /**
     10         * 中国移动：China Mobile
     11         * 134[0-8],135,136,137,138,139,150,151,157,158,159,182,187,188
     12         */
    NSString * CM = @"^1(34[0-8]|(3[5-9]|5[017-9]|8[278])\\d)\\d{7}$";
    /**
     15         * 中国联通：China Unicom
     16         * 130,131,132,152,155,156,185,186
     17         */
    NSString * CU = @"^1(3[0-2]|5[256]|8[56])\\d{8}$";
    /**
     20         * 中国电信：China Telecom
     21         * 133,1349,153,180,189
     22         */
    NSString * CT = @"^1((33|53|8[09])[0-9]|349)\\d{7}$";
    /**
     25         * 大陆地区固话及小灵通
     26         * 区号：010,020,021,022,023,024,025,027,028,029
     27         * 号码：七位或八位
     28         */
    // NSString * PHS = @"^0(10|2[0-5789]|\\d{3})\\d{7,8}$";
    
    NSPredicate *regextestmobile = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", MOBILE];
    NSPredicate *regextestcm = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CM];
    NSPredicate *regextestcu = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CU];
    NSPredicate *regextestct = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CT];
    
    if (([regextestmobile evaluateWithObject:mobileNum] == YES)
        || ([regextestcm evaluateWithObject:mobileNum] == YES)
        || ([regextestct evaluateWithObject:mobileNum] == YES)
        || ([regextestcu evaluateWithObject:mobileNum] == YES))
    {
        return YES;
    }
    else
    {
        return NO;
    }
}

+(FXLabel*)getJianBianLabelWithTitle:(NSString*)aTitle{
    FXLabel *topTitleLabel=[[[FXLabel alloc] initWithFrame:CGRectMake(0, 0, 190, 40)] autorelease];
    topTitleLabel.backgroundColor=[UIColor clearColor];
    topTitleLabel.font=[UIFont boldSystemFontOfSize:20.0f];
    topTitleLabel.textAlignment = NSTextAlignmentCenter;
    topTitleLabel.text=aTitle;
    topTitleLabel.gradientStartColor = [UIColor whiteColor];
    topTitleLabel.gradientEndColor = [UIColor whiteColor];
    return topTitleLabel;
}

+(FXLabel*)getJianBianLabelWithFrame:(CGRect)aRect WithFont:(UIFont*)aFont WithTitle:(NSString*)aTitle{
    FXLabel *topTitleLabel=[[[FXLabel alloc] initWithFrame:aRect] autorelease];
    topTitleLabel.backgroundColor=[UIColor clearColor];
    topTitleLabel.font=aFont;
    topTitleLabel.textAlignment=NSTextAlignmentCenter;
    topTitleLabel.text=aTitle;
    topTitleLabel.gradientStartColor = [UIColor whiteColor];
    topTitleLabel.gradientEndColor = [UIColor whiteColor];
    return topTitleLabel;
}

/////任海丽添加方法
+ (UIImage*)imageWithImage:(UIImage*)inImage withColorMatrix:(const CGFloat*) f
{
	unsigned char *imgPixel = RequestImagePixelData(inImage);
	CGImageRef inImageRef = [inImage CGImage];
	GLuint w = CGImageGetWidth(inImageRef);
	GLuint h = CGImageGetHeight(inImageRef);
	
	int wOff = 0;
	int pixOff = 0;
	
    
	for(GLuint y = 0;y< h;y++)//双层循环按照长宽的像素个数迭代每个像素点
	{
		pixOff = wOff;
		
		for (GLuint x = 0; x<w; x++)
		{
			int red = (unsigned char)imgPixel[pixOff];
			int green = (unsigned char)imgPixel[pixOff+1];
			int blue = (unsigned char)imgPixel[pixOff+2];
            int alpha = (unsigned char)imgPixel[pixOff+3];
            changeRGBA(&red, &green, &blue, &alpha, f);
            
            //回写数据
			imgPixel[pixOff] = red;
			imgPixel[pixOff+1] = green;
			imgPixel[pixOff+2] = blue;
            imgPixel[pixOff+3] = alpha;
            
            
			pixOff += 4; //将数组的索引指向下四个元素
		}
        
		wOff += w * 4;
	}
    
	NSInteger dataLength = w * h * 4;
    
    //下面的代码创建要输出的图像的相关参数
	CGDataProviderRef provider = CGDataProviderCreateWithData(NULL, imgPixel, dataLength, NULL);
    
	int bitsPerComponent = 8;
	int bitsPerPixel = 32;
	int bytesPerRow = 4 * w;
	CGColorSpaceRef colorSpaceRef = CGColorSpaceCreateDeviceRGB();
	CGBitmapInfo bitmapInfo = kCGBitmapByteOrderDefault;
	CGColorRenderingIntent renderingIntent = kCGRenderingIntentDefault;
	
	CGImageRef imageRef = CGImageCreate(w, h, bitsPerComponent, bitsPerPixel, bytesPerRow,colorSpaceRef, bitmapInfo, provider, NULL, NO, renderingIntent);//创建要输出的图像
	
	UIImage *myImage = [UIImage imageWithCGImage:imageRef];
	
	CFRelease(imageRef);
	CGColorSpaceRelease(colorSpaceRef);
	CGDataProviderRelease(provider);
	return myImage;
}

static CGContextRef CreateRGBABitmapContext (CGImageRef inImage)// 返回一个使用RGBA通道的位图上下文
{
	CGContextRef context = NULL;
	CGColorSpaceRef colorSpace;
	void *bitmapData; //内存空间的指针，该内存空间的大小等于图像使用RGB通道所占用的字节数。
	int bitmapByteCount;
	int bitmapBytesPerRow;
    
	size_t pixelsWide = CGImageGetWidth(inImage); //获取横向的像素点的个数
	size_t pixelsHigh = CGImageGetHeight(inImage); //纵向
    
	bitmapBytesPerRow = (pixelsWide * 4); //每一行的像素点占用的字节数，每个像素点的ARGB四个通道各占8个bit(0-255)的空间
	bitmapByteCount	= (bitmapBytesPerRow * pixelsHigh); //计算整张图占用的字节数
    
	colorSpace = CGColorSpaceCreateDeviceRGB();//创建依赖于设备的RGB通道
	
	bitmapData = malloc(bitmapByteCount); //分配足够容纳图片字节数的内存空间
    
	context = CGBitmapContextCreate (bitmapData, pixelsWide, pixelsHigh, 8, bitmapBytesPerRow, colorSpace, kCGImageAlphaPremultipliedLast);
    //创建CoreGraphic的图形上下文，该上下文描述了bitmaData指向的内存空间需要绘制的图像的一些绘制参数
    
	CGColorSpaceRelease( colorSpace );
    //Core Foundation中通过含有Create、Alloc的方法名字创建的指针，需要使用CFRelease()函数释放
    
	return context;
}

static unsigned char *RequestImagePixelData(UIImage *inImage)
// 返回一个指针，该指针指向一个数组，数组中的每四个元素都是图像上的一个像素点的RGBA的数值(0-255)，用无符号的char是因为它正好的取值范围就是0-255
{
	CGImageRef img = [inImage CGImage];
	CGSize size = [inImage size];
    
	CGContextRef cgctx = CreateRGBABitmapContext(img); //使用上面的函数创建上下文
	
	CGRect rect = {{0,0},{size.width, size.height}};
    
	CGContextDrawImage(cgctx, rect, img); //将目标图像绘制到指定的上下文，实际为上下文内的bitmapData。
	unsigned char *data = CGBitmapContextGetData (cgctx);
    
	CGContextRelease(cgctx);//释放上面的函数创建的上下文
	return data;
}

static void changeRGBA(int *red,int *green,int *blue,int *alpha, const CGFloat* f)//修改RGB的值
{
    int redV = *red;
    int greenV = *green;
    int blueV = *blue;
    int alphaV = *alpha;
    
    *red = f[0] * redV + f[1] * greenV + f[2] * blueV + f[3] * alphaV + f[4];
    *green = f[0+5] * redV + f[1+5] * greenV + f[2+5] * blueV + f[3+5] * alphaV + f[4+5];
    *blue = f[0+5*2] * redV + f[1+5*2] * greenV + f[2+5*2] * blueV + f[3+5*2] * alphaV + f[4+5*2];
    *alpha = f[0+5*3] * redV + f[1+5*3] * greenV + f[2+5*3] * blueV + f[3+5*3] * alphaV + f[4+5*3];
    
    if (*red > 255)
    {
        *red = 255;
    }
    if(*red < 0)
    {
        *red = 0;
    }
    if (*green > 255)
    {
        *green = 255;
    }
    if (*green < 0)
    {
        *green = 0;
    }
    if (*blue > 255)
    {
        *blue = 255;
    }
    if (*blue < 0)
    {
        *blue = 0;
    }
    if (*alpha > 255)
    {
        *alpha = 255;
    }
    if (*alpha < 0)
    {
        *alpha = 0;
    }
}

+(NSString*) digest:(NSString*)input
{
    const char *cstr = [input cStringUsingEncoding:NSUTF8StringEncoding];
    NSData *data = [NSData dataWithBytes:cstr length:input.length];
    uint8_t digest[CC_SHA1_DIGEST_LENGTH];
    CC_SHA1(data.bytes, data.length, digest);
    NSMutableString* output = [NSMutableString stringWithCapacity:CC_SHA1_DIGEST_LENGTH * 2];
    for(int i = 0; i < CC_SHA1_DIGEST_LENGTH; i++)
        [output appendFormat:@"%02x", digest[i]];
    return output;
}

//label
+(UILabel *)draughtLabel:(CGRect )frame fontOfSize:(CGFloat)fontSize textAlignment:(int)textAlignment textString:(NSString *)textString textColor:(UIColor *)textColor{
    UILabel *draughtLabel = [[UILabel alloc]initWithFrame:frame];
    draughtLabel.backgroundColor = [UIColor clearColor];
    draughtLabel.textColor = textColor;
    draughtLabel.text = textString;
    draughtLabel.font = [UIFont systemFontOfSize:fontSize];
    switch (textAlignment) {
        case 0:{
            draughtLabel.textAlignment = NSTextAlignmentLeft;
            break;
        }
        case 1:{
            draughtLabel.textAlignment = NSTextAlignmentCenter;
            break;
        }
        case 2:{
            draughtLabel.textAlignment = NSTextAlignmentRight;
            break;
        }
            
        default:
            break;
    }
    
    return draughtLabel;
}

//String宽度
+(CGSize)widthOfString:(NSString *)string withFont:(int)font {
//    CGSize labsize = [string sizeWithFont:[UIFont systemFontOfSize:font] constrainedToSize:CGSizeMake(275, 9999) lineBreakMode:NSLineBreakByWordWrapping]; 
    CGRect textRect = [string boundingRectWithSize:CGSizeMake(3750, 9999)
                                         options:NSStringDrawingUsesLineFragmentOrigin
                                      attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:font]}
                                         context:nil];
    
    CGSize size = textRect.size;
    
    return size;
}

/******************************************************************************
 函数名称  : scaleToSize
 函数描述  : image缩放
 输入参数  :	目的尺寸
 输出参数  : N/A
 返回值	  : 缩放后的image
 备注	  :
 ******************************************************************************/
+(UIImage*)scaleToSize:(CGSize)size toImage:(UIImage *)image
{
    // 创建一个bitmap的context
    // 并把它设置成为当前正在使用的context
    UIGraphicsBeginImageContext(size);
    // 绘制改变大小的图片
    [image drawInRect:CGRectMake(0, 0, size.width, size.height)];
    // 从当前context中创建一个改变大小后的图片
    UIImage * scaledImage = UIGraphicsGetImageFromCurrentImageContext();
    // 使当前的context出堆栈
    UIGraphicsEndImageContext();
    // 返回新的改变大小后的图片
    return scaledImage;
}


//设置字体颜色：把十六进制颜色转化为UIColor
+ (UIColor *)hexStringToColor:(NSString *)stringToConvert
{
    NSString *cString = [[stringToConvert stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] uppercaseString];
    // String should be 6 or 8 characters
    
    if ([cString length] < 6) return [UIColor blackColor];
    // strip 0X if it appears
    if ([cString hasPrefix:@"0X"]) cString = [cString substringFromIndex:2];
    if ([cString hasPrefix:@"#"]) cString = [cString substringFromIndex:1];
    if ([cString length] != 6) return [UIColor blackColor];
    
    // Separate into r, g, b substrings
    
    NSRange range;
    range.location = 0;
    range.length = 2;
    NSString *rString = [cString substringWithRange:range];
    range.location = 2;
    NSString *gString = [cString substringWithRange:range];
    range.location = 4;
    NSString *bString = [cString substringWithRange:range];
    // Scan values
    unsigned int r, g, b;
    
    [[NSScanner scannerWithString:rString] scanHexInt:&r];
    [[NSScanner scannerWithString:gString] scanHexInt:&g];
    [[NSScanner scannerWithString:bString] scanHexInt:&b];
    
    return [UIColor colorWithRed:((CGFloat) r / 255.0f)
                           green:((CGFloat) g / 255.0f)
                            blue:((CGFloat) b / 255.0f)
                           alpha:1.0f];
}
//
+(UIViewController*)getParentViewController:(UIView*)view{
    id object = [view nextResponder];
    while (![object isKindOfClass:[UIViewController class]] &&object != nil) {
        object = [object nextResponder];
    }
    return (UIViewController*)object;
}

+(NSString*)encodeUrlString:(NSString*)urlString{
    NSString *result = (NSString*)CFURLCreateStringByAddingPercentEscapes(nil,
                                                                          (CFStringRef)urlString, nil,
                                                                          (CFStringRef)@"!*'();:@&=+$,/?%#[]", kCFStringEncodingUTF8);
    return result;
}

+(NSString *)md5:(NSString *)str
{
    const char *cStr = [str UTF8String];
    unsigned char result[16];
    CC_MD5(cStr, strlen(cStr), result); // This is the md5 call
    return [NSString stringWithFormat:
            @"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",
            result[0], result[1], result[2], result[3],
            result[4], result[5], result[6], result[7],
            result[8], result[9], result[10], result[11],
            result[12], result[13], result[14], result[15]
            ];
}

//把时间嘬转换为时间的格式
+(NSString*)getDataZuoGeshi:(NSString*)timeDate
{
    double create =[timeDate doubleValue];
    NSDate *confromTimesp = [NSDate dateWithTimeIntervalSince1970:create];
    NSDateFormatter *formatter1 = [[NSDateFormatter alloc] init];
    [formatter1 setDateFormat:@"yyyy年MM月dd日"];
    NSString *showtimeNew = [formatter1 stringFromDate:confromTimesp];
    return showtimeNew;
    
}

+(NSString*)getDateChanged:(NSString*)dateStr
{
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"y-M-d HH:mm:ss"];
    NSDate *date=[dateFormatter dateFromString:dateStr];
    NSString *timeSp = [NSString stringWithFormat:@"%ld", (long)[date timeIntervalSince1970]];
    NSLog(@"timeSp:%@",timeSp); //时间戳的值
    [dateFormatter setDateFormat:@"y年M月d日"];
    NSString *str = [dateFormatter stringFromDate:date];
    
    return str;
}

+(int)jingYin{
#if TARGET_IPHONE_SIMULATOR
    // The simulator doesn't support detection and can cause a crash so always return muted
//    if ([self respondsToSelector:@selector(isMuted:)]) {
//        return 1;
//    }
    return 2;
#endif
    
#if __IPHONE_5_0 <= __IPHONE_OS_VERSION_MAX_ALLOWED
    // iOS 5+ doesn't allow mute switch detection using state length detection
    // So we need to play a blank 100ms file and detect the playback length
    CFStringRef state = nil;
    
    UInt32 propertySize = sizeof(CFStringRef);
    
    AudioSessionInitialize(NULL, NULL, NULL, NULL);
    
    OSStatus status = AudioSessionGetProperty(kAudioSessionProperty_AudioRouteDescription, &propertySize, &state);
    
    if (status == kAudioSessionNoError) {
        return 1;
        //        YES = silent
    }
    return 2;
#else
    // This method doesn't work under iOS 5+
    CFStringRef state;
    UInt32 propertySize = sizeof(CFStringRef);
    AudioSessionInitialize(NULL, NULL, NULL, NULL);
    AudioSessionGetProperty(kAudioSessionProperty_AudioRoute, &propertySize, &state);
    if(CFStringGetLength(state) > 0) {
        return 1;
    }else{
        return 2;
    }
    
#endif

}




@end
